{"meta":{"title":"白日梦想家","subtitle":"未觉池塘春草梦, 阶前梧叶已秋声.","description":null,"author":"houtrry","url":"https://github.com/houtrry"},"pages":[{"title":"categories","date":"2017-08-25T08:49:42.000Z","updated":"2017-12-26T03:30:25.372Z","comments":false,"path":"categories/index.html","permalink":"https://github.com/houtrry/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-08-25T08:37:50.000Z","updated":"2017-12-26T03:30:25.373Z","comments":false,"path":"tags/index.html","permalink":"https://github.com/houtrry/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"关于Java动态代理Proxy的一点思考","date":"2017-12-26T03:38:37.182Z","updated":"2017-12-25T08:27:04.798Z","comments":true,"path":"2017/12/26/关于Java动态代理Proxy的一点思考/","link":"","permalink":"https://github.com/houtrry/2017/12/26/关于Java动态代理Proxy的一点思考/","excerpt":"","text":"静态代理 首先, 我们这里有一个Subject以及实现了Subject的RealSubject, 代码如下: 12345 public interface Subject &#123; void request(); &#125; 123456789 public class RealSubject implements Subject &#123; @Override public void request() &#123; System.out.println(&quot;RealSubject request&quot;); &#125;&#125; 正常情况下, 我们调用RealSubject#request方式如下: 123 RealSubject realSubject = new RealSubject(); realSubject.request(); 现在有一个需求: 我们想在不修改RealSubject代码的前提下, 获取RealSubject#request的执行时间(RealSubject#request方法的增强).可以使用静态代理模式, 优雅地实现这种需求. 12345678910111213141516171819202122 public class StaticSubject implements Subject&#123; private RealSubject realSubject; public StaticSubject(@NotNull RealSubject realSubject) &#123; this.realSubject = realSubject; &#125; @Override public void request() &#123; long startTime = System.currentTimeMillis(); //可以在这里做代码增强 System.out.println(&quot;before request&quot;); //当然, 不一定非要调用realSubject#request, 可以注释掉, 去实现一个完全新的方法 realSubject.request(); //可以在这里做代码增强 System.out.println(&quot;after request&quot;); long endTime = System.currentTimeMillis(); System.out.println(&quot;the time taken by request is &quot;+(endTime - startTime)); &#125;&#125; 动态代理 上面的静态代理有个问题, 接口Subject如果只有一两个方法, 那静态代理还很简单, 如果接口Subject中有很多(比如说十个), 那么, 使用静态代理的话, StaticSubject就需要实现Subject的全部方法(比如说十个之多), 那就很繁琐了. 这个时候, 我们就需要考虑, 有没有更优雅的实现方式呢? 这就引出了我们的主题: 动态代理.","categories":[],"tags":[]},{"title":"ViewStub源码分析","slug":"ViewStub源码分析","date":"2017-09-06T07:55:32.000Z","updated":"2017-12-26T03:30:25.371Z","comments":true,"path":"2017/09/06/ViewStub源码分析/","link":"","permalink":"https://github.com/houtrry/2017/09/06/ViewStub源码分析/","excerpt":"","text":"写在前面本次分析的源码的SDK的版本为25.3.1. ViewStub的简单使用可以查看官方文档的相关说明. 在xml中使用ViewStub12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;com.houtrry.viewstubdemo.MainActivity&quot;&gt; &lt;Button android:id=&quot;@+id/button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;button&quot; android:textAllCaps=&quot;false&quot; android:textSize=&quot;18sp&quot;/&gt; &lt;ViewStub android:id=&quot;@+id/viewStub&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:inflatedId=&quot;@+id/ll_root&quot; android:layout=&quot;@layout/layout_stub&quot;/&gt;&lt;/LinearLayout&gt; 其中, android:layout=”@layout/layout_stub”是关联布局layout_stub, 即是使用@layout/layout_stub来填充布局.android:inflatedId=”@+id/ll_root”的作用稍后说明. layout/layout_stub如下 123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@mipmap/ic_launcher_round&quot;/&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;hello world!&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@color/colorAccent&quot; android:textSize=&quot;15sp&quot;/&gt; &lt;/LinearLayout&gt; 在Activity中控制ViewStub12345678910111213141516171819202122private ViewStub mViewStub;@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mViewStub = (ViewStub) findViewById(R.id.viewStub); LinearLayout ll_root = (LinearLayout) findViewById(R.id.ll_root); Log.d(TAG, &quot;onCreate: ll_root: &quot;+ll_root); findViewById(R.id.button).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; mViewStub.inflate(); LinearLayout ll_root = (LinearLayout) findViewById(R.id.ll_root); Log.d(TAG, &quot;onCreate: ll_root: &quot;+ll_root); &#125; &#125;);&#125; ViewStub#inflate调用前, ViewStub没有任何显示.ViewStub#inflate调用后, 显示出layout/layout_stub的内容.关于android:inflatedId=”@+id/ll_root”, ll_root就是layout_stub的id, 可以使用inflatedId的值来获取android:layout=”@layout/layout_stub”布局的根控件.点击按钮后, 日志如下:12D/MainActivity: onCreate: ll_root: nullD/MainActivity: onCreate: ll_root: android.widget.LinearLayout&#123;180892 V.E..... ......I. 0,0-0,0 #7f0b0060 app:id/ll_root&#125; 说明调用ViewStub#inflate前, 布局layout/layout_stub并没有填充, 也没法获取layout/layout_stub中的控件.ViewStub#inflate后才可以.再次点击按钮, 程序崩溃, 崩溃信息如下123456789101112131415E/AndroidRuntime: FATAL EXCEPTION: main Process: com.houtrry.viewstubdemo, PID: 4841 java.lang.IllegalStateException: ViewStub must have a non-null ViewGroup viewParent at android.view.ViewStub.inflate(ViewStub.java:292) at com.houtrry.viewstubdemo.MainActivity$1.onClick(MainActivity.java:28) at android.view.View.performClick(View.java:4785) at android.view.View$PerformClick.run(View.java:19884) at android.os.Handler.handleCallback(Handler.java:739) at android.os.Handler.dispatchMessage(Handler.java:95) at android.os.Looper.loop(Looper.java:135) at android.app.ActivityThread.main(ActivityThread.java:5343) at java.lang.reflect.Method.invoke(Native Method) at java.lang.reflect.Method.invoke(Method.java:372) at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:905) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:700)提示ViewStub没有父控件. 说明ViewStub#inflate后, 不能再次调用ViewStub#inflate方法. 至于原因, 后面说明. 源码分析源码内容123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153@RemoteViewpublic final class ViewStub extends View &#123; private int mInflatedId; private int mLayoutResource; private WeakReference&lt;View&gt; mInflatedViewRef; private LayoutInflater mInflater; private OnInflateListener mInflateListener; public ViewStub(Context context) &#123; this(context, 0); &#125; public ViewStub(Context context, @LayoutRes int layoutResource) &#123; this(context, null); mLayoutResource = layoutResource; &#125; public ViewStub(Context context, AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public ViewStub(Context context, AttributeSet attrs, int defStyleAttr) &#123; this(context, attrs, defStyleAttr, 0); &#125; public ViewStub(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123; super(context); final TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ViewStub, defStyleAttr, defStyleRes); mInflatedId = a.getResourceId(R.styleable.ViewStub_inflatedId, NO_ID); mLayoutResource = a.getResourceId(R.styleable.ViewStub_layout, 0); mID = a.getResourceId(R.styleable.ViewStub_id, NO_ID); a.recycle(); setVisibility(GONE); setWillNotDraw(true); &#125; @IdRes public int getInflatedId() &#123; return mInflatedId; &#125; @android.view.RemotableViewMethod public void setInflatedId(@IdRes int inflatedId) &#123; mInflatedId = inflatedId; &#125; @LayoutRes public int getLayoutResource() &#123; return mLayoutResource; &#125; @android.view.RemotableViewMethod public void setLayoutResource(@LayoutRes int layoutResource) &#123; mLayoutResource = layoutResource; &#125; public void setLayoutInflater(LayoutInflater inflater) &#123; mInflater = inflater; &#125; public LayoutInflater getLayoutInflater() &#123; return mInflater; &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; setMeasuredDimension(0, 0); &#125; @Override public void draw(Canvas canvas) &#123; &#125; @Override protected void dispatchDraw(Canvas canvas) &#123; &#125; @Override @android.view.RemotableViewMethod public void setVisibility(int visibility) &#123; if (mInflatedViewRef != null) &#123; View view = mInflatedViewRef.get(); if (view != null) &#123; view.setVisibility(visibility); &#125; else &#123; throw new IllegalStateException(&quot;setVisibility called on un-referenced view&quot;); &#125; &#125; else &#123; super.setVisibility(visibility); if (visibility == VISIBLE || visibility == INVISIBLE) &#123; inflate(); &#125; &#125; &#125; public View inflate() &#123; final ViewParent viewParent = getParent(); if (viewParent != null &amp;&amp; viewParent instanceof ViewGroup) &#123; if (mLayoutResource != 0) &#123; final ViewGroup parent = (ViewGroup) viewParent; final LayoutInflater factory; if (mInflater != null) &#123; factory = mInflater; &#125; else &#123; factory = LayoutInflater.from(mContext); &#125; final View view = factory.inflate(mLayoutResource, parent, false); if (mInflatedId != NO_ID) &#123; view.setId(mInflatedId); &#125; final int index = parent.indexOfChild(this); parent.removeViewInLayout(this); final ViewGroup.LayoutParams layoutParams = getLayoutParams(); if (layoutParams != null) &#123; parent.addView(view, index, layoutParams); &#125; else &#123; parent.addView(view, index); &#125; mInflatedViewRef = new WeakReference&lt;View&gt;(view); if (mInflateListener != null) &#123; mInflateListener.onInflate(this, view); &#125; return view; &#125; else &#123; throw new IllegalArgumentException(&quot;ViewStub must have a valid layoutResource&quot;); &#125; &#125; else &#123; throw new IllegalStateException(&quot;ViewStub must have a non-null ViewGroup viewParent&quot;); &#125; &#125; public void setOnInflateListener(OnInflateListener inflateListener) &#123; mInflateListener = inflateListener; &#125; public static interface OnInflateListener &#123; void onInflate(ViewStub stub, View inflated); &#125;&#125; 构造方法构造方法中, 我们获取了属性android:inflatedId 和android:layout的值, 并将ViewStub设置为隐藏. ViewStub#inflate首先, 获取ViewStub的parent, 如果parent为空或者parent不是ViewGroup, 则抛出异常”ViewStub must have a non-null ViewGroup viewParent”, 我们先把问题放在这里, 继续向下看.mLayoutResource就是android:layout的值, 如果没有设置android:layout, 则抛出异常”ViewStub must have a valid layoutResource”.接下来就是ViewStub的核心了.123456789101112131415161718192021222324252627282930//找到ViewStub的父控件final ViewGroup parent = (ViewGroup) viewParent;final LayoutInflater factory;if (mInflater != null) &#123; factory = mInflater;&#125; else &#123; factory = LayoutInflater.from(mContext);&#125;//通过LayoutInflater获取android:layout的Viewfinal View view = factory.inflate(mLayoutResource, parent, false);//如果有设置android:inflatedId, 将android:inflatedId的值设置给填充的View, 这也是为什么我们能通过//LinearLayout ll_root = (LinearLayout) findViewById(R.id.ll_root)获取layout/layout_stub的根控件//LinearLayout的原因if (mInflatedId != NO_ID) &#123; view.setId(mInflatedId);&#125;//获取ViewStub在父控件中的位置final int index = parent.indexOfChild(this);//将ViewStub从父控件中移除!!!.//这里就是ViewStub#inflate调用第二次的时候出现&quot;ViewStub must have a non-null ViewGroup viewParent&quot; //异常的原因. 因为ViewStub#inflate执行后, ViewStub就被移除了, parent就是null.parent.removeViewInLayout(this);//在父控件的相同位置添加填充的Viewfinal ViewGroup.LayoutParams layoutParams = getLayoutParams();if (layoutParams != null) &#123; parent.addView(view, index, layoutParams);&#125; else &#123; parent.addView(view, index);&#125;再往后, 就是用弱引用保存填充的View了, 以及执行InflateListener的监听回调. ViewStub#setVisibility1234567891011121314151617@Override@android.view.RemotableViewMethodpublic void setVisibility(int visibility) &#123; if (mInflatedViewRef != null) &#123; View view = mInflatedViewRef.get(); if (view != null) &#123; view.setVisibility(visibility); &#125; else &#123; throw new IllegalStateException(&quot;setVisibility called on un-referenced view&quot;); &#125; &#125; else &#123; super.setVisibility(visibility); if (visibility == VISIBLE || visibility == INVISIBLE) &#123; inflate(); &#125; &#125;&#125; 这就很简单了, 从弱引用中取出View, 调用View的setVisibility方法. ViewStub#setLayoutResource和ViewStub#setInflatedId123456789@android.view.RemotableViewMethodpublic void setInflatedId(@IdRes int inflatedId) &#123; mInflatedId = inflatedId;&#125;@android.view.RemotableViewMethodpublic void setLayoutResource(@LayoutRes int layoutResource) &#123; mLayoutResource = layoutResource;&#125; 这个很简单了, 在调用ViewStub#inflate前, 我们可以在代码中设置android:inflatedId 和android:layout的值.应该注意的是, ViewStub#inflate只能调用一次, 在ViewStub#inflate后调用ViewStub#setLayoutResource和ViewStub#setInflatedId将不会有任何效果. 总结 ViewStub的原理是初始化的时候隐藏. ViewStub#inflate后, 将自己从父控件中移除, 并将填充View添加到ViewStub所在的位置进行显示. ViewStub#inflate只能调用一次. 调用一次后再调用的话, 会抛出异常”ViewStub must have a non-null ViewGroup viewParent”. ViewStub#inflate后, 使用ViewStub#setVisibility控制控件的显示与隐藏(实际调用的是填充View的显示与隐藏)","categories":[{"name":"Android","slug":"Android","permalink":"https://github.com/houtrry/categories/Android/"}],"tags":[{"name":"源码分析","slug":"源码分析","permalink":"https://github.com/houtrry/tags/源码分析/"},{"name":"ViewStub","slug":"ViewStub","permalink":"https://github.com/houtrry/tags/ViewStub/"}]},{"title":"SnackBar源码分析","slug":"SnackBar源码分析","date":"2017-08-31T15:26:09.000Z","updated":"2017-12-26T03:30:25.371Z","comments":true,"path":"2017/08/31/SnackBar源码分析/","link":"","permalink":"https://github.com/houtrry/2017/08/31/SnackBar源码分析/","excerpt":"","text":"写在前面此次SDK版本25.3.1. SnackBar源码SnackBar#make","categories":[{"name":"Android","slug":"Android","permalink":"https://github.com/houtrry/categories/Android/"}],"tags":[{"name":"源码分析","slug":"源码分析","permalink":"https://github.com/houtrry/tags/源码分析/"},{"name":"SnackBar","slug":"SnackBar","permalink":"https://github.com/houtrry/tags/SnackBar/"}]},{"title":"记录几个Git命令","slug":"记录几个Git命令","date":"2017-08-31T14:28:23.000Z","updated":"2017-12-26T03:30:25.372Z","comments":true,"path":"2017/08/31/记录几个Git命令/","link":"","permalink":"https://github.com/houtrry/2017/08/31/记录几个Git命令/","excerpt":"","text":"git remote set-url origin https://git.coding.net/houtrry/hexo_source.git 设置新的地址 rm -fr ./themes/next/.git/ 删除文件夹 git init 初始化git git remote add origin https://git.coding.net/houtrry/hexo_source.git 设置仓库地址 git add . 添加全部的发生修改的文件 git commit -m “my first private hexo” 提交到本地代码仓库 git push -u origin master推送到远程仓库, 且仓库的分支是master git push origin HEAD:source 提交到source分支 git push origin master提交到master分支 git branch -a 查看远程所有分支未完待续…","categories":[{"name":"Android","slug":"Android","permalink":"https://github.com/houtrry/categories/Android/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://github.com/houtrry/tags/Git/"}]},{"title":"IntentService源码分析","slug":"IntentService源码分析","date":"2017-08-25T07:41:08.000Z","updated":"2017-12-26T03:30:25.370Z","comments":true,"path":"2017/08/25/IntentService源码分析/","link":"","permalink":"https://github.com/houtrry/2017/08/25/IntentService源码分析/","excerpt":"","text":"源码IntentService的源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public abstract class IntentService extends Service &#123; private volatile Looper mServiceLooper; private volatile ServiceHandler mServiceHandler; private String mName; private boolean mRedelivery; private final class ServiceHandler extends Handler &#123; public ServiceHandler(Looper looper) &#123; super(looper); &#125; @Override public void handleMessage(Message msg) &#123; onHandleIntent((Intent)msg.obj); stopSelf(msg.arg1); &#125; &#125; public IntentService(String name) &#123; super(); mName = name; &#125; public void setIntentRedelivery(boolean enabled) &#123; mRedelivery = enabled; &#125; @Override public void onCreate() &#123; // TODO: It would be nice to have an option to hold a partial wakelock // during processing, and to have a static startService(Context, Intent) // method that would launch the service &amp; hand off a wakelock. super.onCreate(); HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;); thread.start(); mServiceLooper = thread.getLooper(); mServiceHandler = new ServiceHandler(mServiceLooper); &#125; @Override public void onStart(@Nullable Intent intent, int startId) &#123; Message msg = mServiceHandler.obtainMessage(); msg.arg1 = startId; msg.obj = intent; mServiceHandler.sendMessage(msg); &#125; @Override public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123; onStart(intent, startId); return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY; &#125; @Override public void onDestroy() &#123; mServiceLooper.quit(); &#125; @Override @Nullable public IBinder onBind(Intent intent) &#123; return null; &#125; @WorkerThread protected abstract void onHandleIntent(@Nullable Intent intent);&#125; HandlerThread源码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071public class HandlerThread extends Thread &#123; int mPriority; int mTid = -1; Looper mLooper; public HandlerThread(String name) &#123; super(name); mPriority = Process.THREAD_PRIORITY_DEFAULT; &#125; public HandlerThread(String name, int priority) &#123; super(name); mPriority = priority; &#125; protected void onLooperPrepared() &#123; &#125; @Override public void run() &#123; mTid = Process.myTid(); Looper.prepare(); synchronized (this) &#123; mLooper = Looper.myLooper(); notifyAll(); &#125; Process.setThreadPriority(mPriority); onLooperPrepared(); Looper.loop(); mTid = -1; &#125; public Looper getLooper() &#123; if (!isAlive()) &#123; return null; &#125; // If the thread has been started, wait until the looper has been created. synchronized (this) &#123; while (isAlive() &amp;&amp; mLooper == null) &#123; try &#123; wait(); &#125; catch (InterruptedException e) &#123; &#125; &#125; &#125; return mLooper; &#125; public boolean quit() &#123; Looper looper = getLooper(); if (looper != null) &#123; looper.quit(); return true; &#125; return false; &#125; public boolean quitSafely() &#123; Looper looper = getLooper(); if (looper != null) &#123; looper.quitSafely(); return true; &#125; return false; &#125; public int getThreadId() &#123; return mTid; &#125;&#125; 分析IntentService#onCreate12HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);thread.start(); 方法中创建了HandlerThread, 而HandlerThread继承自Thread, 即IntentService.onCreate方法中创建了一个子线程, 并开启了子线程.12mServiceLooper = thread.getLooper();mServiceHandler = new ServiceHandler(mServiceLooper); 将子线程的Looper交给内部类ServiceHandler, 而ServiceHandler继承自Handler.于是, 先来查看下HandlerThread到底做了什么. HandlerThread#runHandlerThread继承自Thread, 那先看下run方法12345678910111213@Overridepublic void run() &#123; mTid = Process.myTid(); Looper.prepare(); synchronized (this) &#123; mLooper = Looper.myLooper(); notifyAll(); &#125; Process.setThreadPriority(mPriority); onLooperPrepared(); Looper.loop(); mTid = -1;&#125; 在run方法中, 我们看到了Looper.prepare()方法, 了解Handler的都知道, 在子线程中创建Handler, 需要先调用Looper.prepare()方法在子线程中创建looper.那这里run方法就清晰了, run方法创建了looper并且调用了Looper.loop()方法轮询Looper中的消息队列. ServiceHandler#handleMessage知道了ServiceHandler的looper来自于HandlerThread中创建的looper后, 我们可以知道, ServiceHandler#handleMessage将会执行在线程ServiceHandler中.12345@Overridepublic void handleMessage(Message msg) &#123; onHandleIntent((Intent)msg.obj); stopSelf(msg.arg1);&#125; handleMessage中有onHandleIntent((Intent)msg.obj);和stopSelf(msg.arg1);onHandleIntent((Intent)msg.obj)方法就是我们要具体实现的方法, 我们实现这个方法, 将需要在子线程中完成的事情放到这里.stopSelf(msg.arg1)方法就是停止service. 那什么时候执行handleMessage方法中的内容呢?12345678910111213@Overridepublic void onStart(@Nullable Intent intent, int startId) &#123; Message msg = mServiceHandler.obtainMessage(); msg.arg1 = startId; msg.obj = intent; mServiceHandler.sendMessage(msg);&#125;@Overridepublic int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123; onStart(intent, startId); return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;&#125; 在IntentService#onStart方法中, mServiceHandler发出消息, 开始在子线程HandlerThread中执行onHandleIntent((Intent)msg.obj)和stopSelf(msg.arg1) 总结1.在IntentService#onCreate方法中 ①创建子线程, 并在子线程中创建looper, 调用Looper.loop()方法轮询消息. ②用子线程中创建的Looper创建Handler. 2.在IntentService#onStart方法中, 通过mServiceHandler发送Message, 触发在子线程(HandlerThread所在线程)中执行IntentService#onHandleIntent方法和IntentService#stopSelf来执行任务, 并在任务结束的时候停止Service. 3.IntentService#onDestroy方法中, 执行mServiceLooper.quit();即, 停止loop的轮询.轮询停止后, 子线程HandlerThread也就结束了.","categories":[{"name":"Android","slug":"Android","permalink":"https://github.com/houtrry/categories/Android/"}],"tags":[{"name":"源码分析","slug":"源码分析","permalink":"https://github.com/houtrry/tags/源码分析/"},{"name":"IntentService","slug":"IntentService","permalink":"https://github.com/houtrry/tags/IntentService/"},{"name":"HandlerThread","slug":"HandlerThread","permalink":"https://github.com/houtrry/tags/HandlerThread/"}]},{"title":"dagger2的使用小结","slug":"dagger2的使用小结","date":"2017-08-25T05:53:50.000Z","updated":"2017-12-26T03:30:25.372Z","comments":true,"path":"2017/08/25/dagger2的使用小结/","link":"","permalink":"https://github.com/houtrry/2017/08/25/dagger2的使用小结/","excerpt":"","text":"引入dagger2参考dagger2的GitHub说明.1234dependencies &#123; compile &apos;com.google.dagger:dagger:2.x&apos; annotationProcessor &apos;com.google.dagger:dagger-compiler:2.x&apos;&#125; ###几个常用的注解 @Module, @Component, @Inject, @Provides 生成对象的方式生成对象有两个方式:①.@Inject 注解提供方式：在所需类的构造函数中直接加上 @Inject 注解②.@Module 注解提供方式：通过新建一个专门的提供这类来提供类实例，然后在类名上面添加 @Module 注解，在类中自己定义方法，手动通过 new 来进行创建，这种主要是针对第三方库中，我们无法直接在构造函数中添加 @Inject 注解的情况。 方式①1&gt; 用@Inject注解Bean类的构造方法1234567891011public class Apple &#123; @Inject public Apple() &#123; &#125; public String getDescription() &#123; return &quot;this is a red apple&quot;; &#125;&#125; 2&gt;使用@Component注解自己的Component类.比如下面的AppleComponent, 该类用@Component注解, 类中提供inject方法(方法名可以随便写, 一般用inject), 方法的参数Main9Activity是需要使用注解生成Apple的类.1234@Componentpublic interface AppleComponent &#123; void inject(Main9Activity main9Activity);&#125; 3&gt;编译项目, Android Studio Build–&gt;Make Project或者直接点击 4&gt;使用@Inject注解需要生成Apple的变量, 注入Main9Activity12345678910111213141516171819public class Main9Activity extends AppCompatActivity &#123; @BindView(R.id.textView9) TextView mTextView9; @Inject Apple mApple; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main9); ButterKnife.bind(this); DaggerAppleComponent.builder().build().inject(this); mTextView9.setText(mApple.getDescription()); &#125;&#125; 1DaggerAppleComponent.builder().build().inject(this); 这里, 上面第4步生成了DaggerAppleComponent, 实现了接口AppleComponent的inject方法, 此时, 注入Main9Activity, 将Main9Activity和Apple关联起来. 那么, 思考一个问题, 如果这个Apple类我们并不能修改, 也就是我们不能再Apple的构造函数上添加注解@Inject(比如第三方库里的类), 那我们怎么处理呢? 这就得用我们第二种注解方法了. 方式②1&gt; 生成一个普通的Bean12345678910111213141516public class Cloth &#123; private String color; public String getColor() &#123; return color; &#125; public void setColor(String color) &#123; this.color = color; &#125; @Override public String toString() &#123; return color + &quot;布料&quot;; &#125;&#125; 2&gt;构建Module注解@Module表明这是一个Module类, 方法上的@Provides表明该方法生成一个返回值为Cloth类型的依赖对象12345678910@Modulepublic class MainModule &#123; @Provides public Cloth getCloth() &#123; Cloth cloth = new Cloth(); cloth.setColor(&quot;红色&quot;); return cloth; &#125;&#125; 3&gt;书写Component1234@Component(modules=MainModule.class)public interface MainComponent &#123; void inject(MainActivity mainActivity);&#125; MainComponent是一个接口, 接口上用@Component注解, 表明这是一个Component, @Component的参数model=MainModule.class, 将MainMoudle和MainComponent关联起来, MainComponent中有一个inject的方法(方法名随意, 方法参数是需要使用到注解生成对象的类, 这里是需要在MainActivity中使用注解生成Cloth)4&gt;AS: Build–&gt;make Project5&gt;在MainActivity中使用注解.1234567891011121314151617public class Main3Activity extends AppCompatActivity &#123; private TextView mTextView; @Inject Cloth mCloth; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main3); mTextView = (TextView) findViewById(R.id.textView2); DaggerMainComponent.builder().mainModule(new MainModule()).build().inject(this); &#125;&#125; Dagger2原理分析1.就使用上面方式一的例子吧.注入的目的是在Main9Activity中生成Apple的实例.我们从1DaggerAppleComponent.builder().build().inject(this); 开始分析吧.首先, 看下DaggerAppleComponent的源码123456789101112131415161718192021222324252627282930313233343536public final class DaggerAppleComponent implements AppleComponent &#123; private MembersInjector&lt;Main9Activity&gt; main9ActivityMembersInjector; private DaggerAppleComponent(Builder builder) &#123; assert builder != null; initialize(builder); &#125; public static Builder builder() &#123; return new Builder(); &#125; public static AppleComponent create() &#123; return new Builder().build(); &#125; @SuppressWarnings(&quot;unchecked&quot;) private void initialize(final Builder builder) &#123; this.main9ActivityMembersInjector = Main9Activity_MembersInjector.create(Apple_Factory.create()); &#125; @Override public void inject(Main9Activity main9Activity) &#123; main9ActivityMembersInjector.injectMembers(main9Activity); &#125; public static final class Builder &#123; private Builder() &#123;&#125; public AppleComponent build() &#123; return new DaggerAppleComponent(this); &#125; &#125;&#125; 2.DaggerAppleComponent.builder(): builder()方法里new 了一个DaggerAppleComponent.Builder, 并返回这个新建的Builder.3.DaggerAppleComponent.builder().build(): build()方法里new了DaggerAppleComponent的实例, 并将上个方法创建的Builder传给了DaggerAppleComponent的构造方法.在DaggerAppleComponent的构造方法里, 调用了DaggerAppleComponent.initialize(builder).在initialize里. 调用了Main9Activity_MembersInjector.create(Apple_Factory.create())方法.4.现在我们来看一下这个Main9Activity_MembersInjector.create(Apple_Factory.create())方法都做了什么事情.首先, 看下Apple_Factory的源码123456789101112public final class Apple_Factory implements Factory&lt;Apple&gt; &#123; private static final Apple_Factory INSTANCE = new Apple_Factory(); @Override public Apple get() &#123; return new Apple(); &#125; public static Factory&lt;Apple&gt; create() &#123; return INSTANCE; &#125;&#125; 从源码可知, Apple_Factory是个单例, create方法返回了该单例. get方法返回了一个Apple实例.这个时候就要注意了, 我们注解的目的是什么? 就是生成一个Apple实例啊, 那么, 现在我们知道, Apple_Factory的get方法创建了一个Apple实例. 记住这一点. 我们继续向下看Main9Activity_MembersInjector.123456789101112131415161718192021222324public final class Main9Activity_MembersInjector implements MembersInjector&lt;Main9Activity&gt; &#123; private final Provider&lt;Apple&gt; mAppleProvider; public Main9Activity_MembersInjector(Provider&lt;Apple&gt; mAppleProvider) &#123; assert mAppleProvider != null; this.mAppleProvider = mAppleProvider; &#125; public static MembersInjector&lt;Main9Activity&gt; create(Provider&lt;Apple&gt; mAppleProvider) &#123; return new Main9Activity_MembersInjector(mAppleProvider); &#125; @Override public void injectMembers(Main9Activity instance) &#123; if (instance == null) &#123; throw new NullPointerException(&quot;Cannot inject members into a null reference&quot;); &#125; instance.mApple = mAppleProvider.get(); &#125; public static void injectMApple(Main9Activity instance, Provider&lt;Apple&gt; mAppleProvider) &#123; instance.mApple = mAppleProvider.get(); &#125;&#125; Main9Activity_MembersInjector.create(Apple_Factory.create())方法到底做了什么呢?我们已知Apple_Factory.create()返回了单例Apple_Factory并且, Apple_Factory.get方法返回了Apple的实例.现在来看Main9Activity_MembersInjector.create, 在该方法中, new了一个Main9Activity_MembersInjector, 并将Apple_Factory的单例传给这个构造方法.在Main9Activity_MembersInjector的构造方法中, 将Apple_Factory的实例赋值给了Main9Activity_MembersInjector的成员变量mAppleProvider, 此时, 通过成员变量mAppleProvider的get方法就可以得到一个Apple的实例了.5.DaggerMainComponent.builder().mainModule(new MainModule()).build().inject(this): 最后这个inject方法做了什么呢?1234@Overridepublic void inject(Main9Activity main9Activity) &#123; main9ActivityMembersInjector.injectMembers(main9Activity);&#125; 1234567@Overridepublic void injectMembers(Main9Activity instance) &#123; if (instance == null) &#123; throw new NullPointerException(&quot;Cannot inject members into a null reference&quot;); &#125; instance.mApple = mAppleProvider.get();&#125; 此时, 我们终于找到了这个给Main9Activity的成员变量mApple赋值的地方了, 通过inject调用Main9Activity_MembersInjector.injectMembers方法, 在injectMembers方法中, 通过单例Apple_Factory.get获取Apple的实例, 并将该实例直接赋值飞Main9Activity.mApple, 到此, 给mApple生成实例的过程就结束了. 当然, 这里分析的只是最简单的使用模式, 随着Dagger2的使用, 代码会越来越复杂.在这里, 我们也可以明白, 为什么成员变量mApple不能是private或者protected的, 因为给mApple赋值的方式使用过instance.mApple来实现的, 如果mApple是private或者protected, 这里将会报错.","categories":[{"name":"Android","slug":"Android","permalink":"https://github.com/houtrry/categories/Android/"}],"tags":[{"name":"Dagger2","slug":"Dagger2","permalink":"https://github.com/houtrry/tags/Dagger2/"}]}]}