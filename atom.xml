<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白日梦想家</title>
  
  <subtitle>未觉池塘春草梦, 阶前梧叶已秋声.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/houtrry/"/>
  <updated>2017-12-26T09:50:09.227Z</updated>
  <id>https://github.com/houtrry/</id>
  
  <author>
    <name>houtrry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Java动态代理Proxy的一点思考</title>
    <link href="https://github.com/houtrry/2017/12/26/%E5%85%B3%E4%BA%8EJava%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86Proxy%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <id>https://github.com/houtrry/2017/12/26/关于Java动态代理Proxy的一点思考/</id>
    <published>2017-12-26T03:42:11.000Z</published>
    <updated>2017-12-26T09:50:09.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ol><li><p>首先, 我们这里有一个接口Subject以及实现了Subject的RealSubject, 代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Subject &#123;</span><br><span class="line"></span><br><span class="line">    void request();  </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class RealSubject implements Subject &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void request() &#123;</span><br><span class="line">        System.out.println(&quot;RealSubject request&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正常情况下, 我们调用RealSubject#request方式如下:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RealSubject realSubject = new RealSubject();  </span><br><span class="line">realSubject.request();  </span><br></pre></td></tr></table></figure></li><li><p>现在有一个需求: 我们想在不修改RealSubject代码的前提下, 获取RealSubject#request的执行时间(RealSubject#request方法的增强).<br>可以使用静态代理模式, 优雅地实现这种需求.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class StaticSubject implements Subject&#123;</span><br><span class="line"></span><br><span class="line">    private RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    public StaticSubject(@NotNull RealSubject realSubject) &#123;</span><br><span class="line">        this.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void request() &#123;</span><br><span class="line">        long startTime = System.currentTimeMillis();</span><br><span class="line">        //可以在这里做代码增强</span><br><span class="line">        System.out.println(&quot;before request&quot;);</span><br><span class="line">        //当然, 不一定非要调用realSubject#request, 可以注释掉, 去实现一个完全新的方法</span><br><span class="line">        realSubject.request();</span><br><span class="line">        //可以在这里做代码增强</span><br><span class="line">        System.out.println(&quot;after request&quot;);</span><br><span class="line">        long endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;the time taken by request is &quot;+(endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ol><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="静态代理的问题以及优化"><a href="#静态代理的问题以及优化" class="headerlink" title="静态代理的问题以及优化"></a>静态代理的问题以及优化</h3><p>上面的静态代理有个问题, 接口Subject如果只有一两个方法, 那静态代理还很简单, 如果接口Subject中有很多(比如说十个), 那么, 使用静态代理的话, StaticSubject就需要实现Subject的全部方法(比如说十个之多), 那就很繁琐了. 这个时候, 我们就需要考虑, 有没有更优雅的实现方式呢? 这就引出了我们的主题: 动态代理. 使用动态代理的实现方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicSubject implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    private Object sub;</span><br><span class="line"></span><br><span class="line">    public DynamicSubject(Object sub) &#123;</span><br><span class="line">        this.sub = sub;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Subject bind() &#123;</span><br><span class="line">        Class&lt;Subject&gt; subjectClass = Subject.class;</span><br><span class="line">        return (Subject) Proxy.newProxyInstance(subjectClass.getClassLoader(),</span><br><span class="line">                new Class[]&#123;subjectClass&#125;,</span><br><span class="line">                this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;-----&gt;invoke, proxy: &quot; + proxy.getClass().getName());</span><br><span class="line">        System.out.println(&quot;-----&gt;invoke, sub: &quot; + sub);</span><br><span class="line">        //通过反射调用sub中的method方法</span><br><span class="line">//        Object invoke = method.invoke(sub, args);</span><br><span class="line">//        System.out.println(&quot;after calling &quot; + method);</span><br><span class="line">//        return invoke;</span><br><span class="line">        long startTime = System.currentTimeMillis();</span><br><span class="line">        method.invoke(sub, args);</span><br><span class="line">        long endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;the time taken by &quot;+method.getName()+&quot; is &quot; + (endTime - startTime));</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RealSubject realSubject = new RealSubject();</span><br><span class="line">DynamicSubject dynamicSubject = new DynamicSubject(realSubject);</span><br><span class="line">Subject subject = dynamicSubject.bind();</span><br><span class="line">subject.request();</span><br></pre></td></tr></table></figure><br>打印的日志如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-----&gt;invoke, proxy: com.sun.proxy.$Proxy0</span><br><span class="line">-----&gt;invoke, sub: proxy.RealSubject@4b67cf4d</span><br><span class="line">before calling public abstract void proxy.Subject.request()</span><br><span class="line">RealSubject request</span><br><span class="line">the time taken by request is 2</span><br><span class="line">-----&gt;invoke, proxy: com.sun.proxy.$Proxy0</span><br><span class="line">-----&gt;invoke, sub: proxy.RealSubject@4b67cf4d</span><br><span class="line">before calling public java.lang.String java.lang.Object.toString()</span><br><span class="line">the time taken by toString is 0</span><br><span class="line">subject: null</span><br></pre></td></tr></table></figure></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>动态代理的关键在InvocationHandler#invoke方法</li><li>动态代理中使用了反射</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.zhihu.com/question/20794107" target="_blank" rel="noopener">Java 动态代理作用是什么？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;静态代理&quot;&gt;&lt;a href=&quot;#静态代理&quot; class=&quot;headerlink&quot; title=&quot;静态代理&quot;&gt;&lt;/a&gt;静态代理&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先, 我们这里有一个接口Subject以及实现了Subject的RealSubject, 代码如下:&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/houtrry/categories/Java/"/>
    
    
      <category term="Java" scheme="https://github.com/houtrry/tags/Java/"/>
    
      <category term="动态代理Proxy" scheme="https://github.com/houtrry/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86Proxy/"/>
    
  </entry>
  
  <entry>
    <title>ViewStub源码分析</title>
    <link href="https://github.com/houtrry/2017/09/06/ViewStub%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/houtrry/2017/09/06/ViewStub源码分析/</id>
    <published>2017-09-06T07:55:32.000Z</published>
    <updated>2017-12-26T03:30:25.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本次分析的源码的SDK的版本为25.3.1.  </p><h2 id="ViewStub的简单使用"><a href="#ViewStub的简单使用" class="headerlink" title="ViewStub的简单使用"></a>ViewStub的简单使用</h2><p>可以查看<a href="https://developer.android.com/reference/android/view/ViewStub.html" target="_blank" rel="noopener">官方文档</a>的相关说明.  </p><h3 id="在xml中使用ViewStub"><a href="#在xml中使用ViewStub" class="headerlink" title="在xml中使用ViewStub"></a>在xml中使用ViewStub</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    tools:context=&quot;com.houtrry.viewstubdemo.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;button&quot;</span><br><span class="line">        android:textAllCaps=&quot;false&quot;</span><br><span class="line">        android:textSize=&quot;18sp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ViewStub</span><br><span class="line">        android:id=&quot;@+id/viewStub&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:inflatedId=&quot;@+id/ll_root&quot;</span><br><span class="line">        android:layout=&quot;@layout/layout_stub&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>其中, android:layout=”@layout/layout_stub”是关联布局layout_stub, 即是使用@layout/layout_stub来填充布局.android:inflatedId=”@+id/ll_root”的作用稍后说明. </p><p>layout/layout_stub如下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">              android:layout_width=&quot;match_parent&quot;</span><br><span class="line">              android:layout_height=&quot;match_parent&quot;</span><br><span class="line">              android:gravity=&quot;center&quot;</span><br><span class="line">              android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:background=&quot;@mipmap/ic_launcher_round&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;hello world!&quot;</span><br><span class="line">        android:textAllCaps=&quot;false&quot;</span><br><span class="line">        android:textColor=&quot;@color/colorAccent&quot;</span><br><span class="line">        android:textSize=&quot;15sp&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/LinearLayout&gt; </span><br></pre></td></tr></table></figure>  <h3 id="在Activity中控制ViewStub"><a href="#在Activity中控制ViewStub" class="headerlink" title="在Activity中控制ViewStub"></a>在Activity中控制ViewStub</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private ViewStub mViewStub;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    mViewStub = (ViewStub) findViewById(R.id.viewStub);</span><br><span class="line"></span><br><span class="line">    LinearLayout ll_root = (LinearLayout) findViewById(R.id.ll_root);</span><br><span class="line">    Log.d(TAG, &quot;onCreate: ll_root: &quot;+ll_root);</span><br><span class="line"></span><br><span class="line">    findViewById(R.id.button).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View view) &#123;</span><br><span class="line">            mViewStub.inflate();</span><br><span class="line"></span><br><span class="line">            LinearLayout ll_root = (LinearLayout) findViewById(R.id.ll_root);</span><br><span class="line">            Log.d(TAG, &quot;onCreate: ll_root: &quot;+ll_root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>ViewStub#inflate调用前, ViewStub没有任何显示.ViewStub#inflate调用后, 显示出layout/layout_stub的内容.<br>关于android:inflatedId=”@+id/ll_root”, ll_root就是layout_stub的id, 可以使用inflatedId的值来获取android:layout=”@layout/layout_stub”布局的根控件.<br>点击按钮后, 日志如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity: onCreate: ll_root: null</span><br><span class="line">D/MainActivity: onCreate: ll_root: android.widget.LinearLayout&#123;180892 V.E..... ......I. 0,0-0,0 #7f0b0060 app:id/ll_root&#125;</span><br></pre></td></tr></table></figure></p><p>说明调用ViewStub#inflate前, 布局layout/layout_stub并没有填充, 也没法获取layout/layout_stub中的控件.ViewStub#inflate后才可以.<br>再次点击按钮, 程序崩溃, 崩溃信息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">                  Process: com.houtrry.viewstubdemo, PID: 4841</span><br><span class="line">                  java.lang.IllegalStateException: ViewStub must have a non-null ViewGroup viewParent</span><br><span class="line">                      at android.view.ViewStub.inflate(ViewStub.java:292)</span><br><span class="line">                      at com.houtrry.viewstubdemo.MainActivity$1.onClick(MainActivity.java:28)</span><br><span class="line">                      at android.view.View.performClick(View.java:4785)</span><br><span class="line">                      at android.view.View$PerformClick.run(View.java:19884)</span><br><span class="line">                      at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class="line">                      at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class="line">                      at android.os.Looper.loop(Looper.java:135)</span><br><span class="line">                      at android.app.ActivityThread.main(ActivityThread.java:5343)</span><br><span class="line">                      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">                      at java.lang.reflect.Method.invoke(Method.java:372)</span><br><span class="line">                      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:905)</span><br><span class="line">                      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:700)</span><br></pre></td></tr></table></figure><br>提示ViewStub没有父控件. 说明ViewStub#inflate后, 不能再次调用ViewStub#inflate方法. 至于原因, 后面说明.</p><hr><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="源码内容"><a href="#源码内容" class="headerlink" title="源码内容"></a>源码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">@RemoteView</span><br><span class="line">public final class ViewStub extends View &#123;</span><br><span class="line">    private int mInflatedId;</span><br><span class="line">    private int mLayoutResource;</span><br><span class="line"></span><br><span class="line">    private WeakReference&lt;View&gt; mInflatedViewRef;</span><br><span class="line"></span><br><span class="line">    private LayoutInflater mInflater;</span><br><span class="line">    private OnInflateListener mInflateListener;</span><br><span class="line"></span><br><span class="line">    public ViewStub(Context context) &#123;</span><br><span class="line">        this(context, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ViewStub(Context context, @LayoutRes int layoutResource) &#123;</span><br><span class="line">        this(context, null);</span><br><span class="line"></span><br><span class="line">        mLayoutResource = layoutResource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ViewStub(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        this(context, attrs, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ViewStub(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        this(context, attrs, defStyleAttr, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ViewStub(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123;</span><br><span class="line">        super(context);</span><br><span class="line"></span><br><span class="line">        final TypedArray a = context.obtainStyledAttributes(attrs,</span><br><span class="line">                R.styleable.ViewStub, defStyleAttr, defStyleRes);</span><br><span class="line">        mInflatedId = a.getResourceId(R.styleable.ViewStub_inflatedId, NO_ID);</span><br><span class="line">        mLayoutResource = a.getResourceId(R.styleable.ViewStub_layout, 0);</span><br><span class="line">        mID = a.getResourceId(R.styleable.ViewStub_id, NO_ID);</span><br><span class="line">        a.recycle();</span><br><span class="line"></span><br><span class="line">        setVisibility(GONE);</span><br><span class="line">        setWillNotDraw(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @IdRes</span><br><span class="line">    public int getInflatedId() &#123;</span><br><span class="line">        return mInflatedId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @android.view.RemotableViewMethod</span><br><span class="line">    public void setInflatedId(@IdRes int inflatedId) &#123;</span><br><span class="line">        mInflatedId = inflatedId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @LayoutRes</span><br><span class="line">    public int getLayoutResource() &#123;</span><br><span class="line">        return mLayoutResource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @android.view.RemotableViewMethod</span><br><span class="line">    public void setLayoutResource(@LayoutRes int layoutResource) &#123;</span><br><span class="line">        mLayoutResource = layoutResource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLayoutInflater(LayoutInflater inflater) &#123;</span><br><span class="line">        mInflater = inflater;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LayoutInflater getLayoutInflater() &#123;</span><br><span class="line">        return mInflater;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">        setMeasuredDimension(0, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void draw(Canvas canvas) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void dispatchDraw(Canvas canvas) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @android.view.RemotableViewMethod</span><br><span class="line">    public void setVisibility(int visibility) &#123;</span><br><span class="line">        if (mInflatedViewRef != null) &#123;</span><br><span class="line">            View view = mInflatedViewRef.get();</span><br><span class="line">            if (view != null) &#123;</span><br><span class="line">                view.setVisibility(visibility);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;setVisibility called on un-referenced view&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            super.setVisibility(visibility);</span><br><span class="line">            if (visibility == VISIBLE || visibility == INVISIBLE) &#123;</span><br><span class="line">                inflate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public View inflate() &#123;</span><br><span class="line">        final ViewParent viewParent = getParent();</span><br><span class="line"></span><br><span class="line">        if (viewParent != null &amp;&amp; viewParent instanceof ViewGroup) &#123;</span><br><span class="line">            if (mLayoutResource != 0) &#123;</span><br><span class="line">                final ViewGroup parent = (ViewGroup) viewParent;</span><br><span class="line">                final LayoutInflater factory;</span><br><span class="line">                if (mInflater != null) &#123;</span><br><span class="line">                    factory = mInflater;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    factory = LayoutInflater.from(mContext);</span><br><span class="line">                &#125;</span><br><span class="line">                final View view = factory.inflate(mLayoutResource, parent,</span><br><span class="line">                        false);</span><br><span class="line"></span><br><span class="line">                if (mInflatedId != NO_ID) &#123;</span><br><span class="line">                    view.setId(mInflatedId);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                final int index = parent.indexOfChild(this);</span><br><span class="line">                parent.removeViewInLayout(this);</span><br><span class="line"></span><br><span class="line">                final ViewGroup.LayoutParams layoutParams = getLayoutParams();</span><br><span class="line">                if (layoutParams != null) &#123;</span><br><span class="line">                    parent.addView(view, index, layoutParams);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    parent.addView(view, index);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mInflatedViewRef = new WeakReference&lt;View&gt;(view);</span><br><span class="line"></span><br><span class="line">                if (mInflateListener != null) &#123;</span><br><span class="line">                    mInflateListener.onInflate(this, view);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return view;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;ViewStub must have a valid layoutResource&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;ViewStub must have a non-null ViewGroup viewParent&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOnInflateListener(OnInflateListener inflateListener) &#123;</span><br><span class="line">        mInflateListener = inflateListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static interface OnInflateListener &#123;</span><br><span class="line">        void onInflate(ViewStub stub, View inflated);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法中, 我们获取了属性android:inflatedId 和android:layout的值, 并将ViewStub设置为隐藏.</p><h3 id="ViewStub-inflate"><a href="#ViewStub-inflate" class="headerlink" title="ViewStub#inflate"></a>ViewStub#inflate</h3><p>首先, 获取ViewStub的parent, 如果parent为空或者parent不是ViewGroup, 则抛出异常”ViewStub must have a non-null ViewGroup viewParent”, 我们先把问题放在这里, 继续向下看.<br>mLayoutResource就是android:layout的值, 如果没有设置android:layout, 则抛出异常”ViewStub must have a valid layoutResource”.<br>接下来就是ViewStub的核心了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//找到ViewStub的父控件</span><br><span class="line">final ViewGroup parent = (ViewGroup) viewParent;</span><br><span class="line">final LayoutInflater factory;</span><br><span class="line">if (mInflater != null) &#123;</span><br><span class="line">    factory = mInflater;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    factory = LayoutInflater.from(mContext);</span><br><span class="line">&#125;</span><br><span class="line">//通过LayoutInflater获取android:layout的View</span><br><span class="line">final View view = factory.inflate(mLayoutResource, parent,</span><br><span class="line">        false);</span><br><span class="line">//如果有设置android:inflatedId, 将android:inflatedId的值设置给填充的View, 这也是为什么我们能通过</span><br><span class="line">//LinearLayout ll_root = (LinearLayout) findViewById(R.id.ll_root)获取layout/layout_stub的根控件</span><br><span class="line">//LinearLayout的原因</span><br><span class="line">if (mInflatedId != NO_ID) &#123;</span><br><span class="line">    view.setId(mInflatedId);</span><br><span class="line">&#125;</span><br><span class="line">//获取ViewStub在父控件中的位置</span><br><span class="line">final int index = parent.indexOfChild(this);</span><br><span class="line">//将ViewStub从父控件中移除!!!.</span><br><span class="line">//这里就是ViewStub#inflate调用第二次的时候出现&quot;ViewStub must have a non-null ViewGroup viewParent&quot;  </span><br><span class="line">//异常的原因. 因为ViewStub#inflate执行后, ViewStub就被移除了, parent就是null.</span><br><span class="line">parent.removeViewInLayout(this);</span><br><span class="line">//在父控件的相同位置添加填充的View</span><br><span class="line">final ViewGroup.LayoutParams layoutParams = getLayoutParams();</span><br><span class="line">if (layoutParams != null) &#123;</span><br><span class="line">    parent.addView(view, index, layoutParams);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    parent.addView(view, index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再往后, 就是用弱引用保存填充的View了, 以及执行InflateListener的监听回调.  </p><h3 id="ViewStub-setVisibility"><a href="#ViewStub-setVisibility" class="headerlink" title="ViewStub#setVisibility"></a>ViewStub#setVisibility</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@android.view.RemotableViewMethod</span><br><span class="line">public void setVisibility(int visibility) &#123;</span><br><span class="line">    if (mInflatedViewRef != null) &#123;</span><br><span class="line">        View view = mInflatedViewRef.get();</span><br><span class="line">        if (view != null) &#123;</span><br><span class="line">            view.setVisibility(visibility);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;setVisibility called on un-referenced view&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        super.setVisibility(visibility);</span><br><span class="line">        if (visibility == VISIBLE || visibility == INVISIBLE) &#123;</span><br><span class="line">            inflate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>这就很简单了, 从弱引用中取出View, 调用View的setVisibility方法.  </p><h3 id="ViewStub-setLayoutResource和ViewStub-setInflatedId"><a href="#ViewStub-setLayoutResource和ViewStub-setInflatedId" class="headerlink" title="ViewStub#setLayoutResource和ViewStub#setInflatedId"></a>ViewStub#setLayoutResource和ViewStub#setInflatedId</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@android</span>.view.RemotableViewMethod</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInflatedId</span><span class="params">(@IdRes <span class="keyword">int</span> inflatedId)</span> </span>&#123;</span><br><span class="line">    mInflatedId = inflatedId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@android</span>.view.RemotableViewMethod</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutResource</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResource)</span> </span>&#123;</span><br><span class="line">    mLayoutResource = layoutResource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>这个很简单了, 在调用ViewStub#inflate前, 我们可以在代码中设置android:inflatedId 和android:layout的值.<br>应该注意的是, ViewStub#inflate只能调用一次, 在ViewStub#inflate后调用ViewStub#setLayoutResource和ViewStub#setInflatedId将不会有任何效果.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>ViewStub的原理是初始化的时候隐藏. ViewStub#inflate后, 将自己从父控件中移除, 并将填充View添加到ViewStub所在的位置进行显示.  </li><li>ViewStub#inflate只能调用一次. 调用一次后再调用的话, 会抛出异常”ViewStub must have a non-null ViewGroup viewParent”.  </li><li>ViewStub#inflate后, 使用ViewStub#setVisibility控制控件的显示与隐藏(实际调用的是填充View的显示与隐藏)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本次分析的源码的SDK的版本为25.3.1.  &lt;/p&gt;
&lt;h2 id=&quot;ViewStub的简单使用&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Android" scheme="https://github.com/houtrry/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://github.com/houtrry/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ViewStub" scheme="https://github.com/houtrry/tags/ViewStub/"/>
    
  </entry>
  
  <entry>
    <title>SnackBar源码分析</title>
    <link href="https://github.com/houtrry/2017/08/31/SnackBar%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/houtrry/2017/08/31/SnackBar源码分析/</id>
    <published>2017-08-31T15:26:09.000Z</published>
    <updated>2017-12-26T03:30:25.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>此次SDK版本25.3.1.</p><h2 id="SnackBar源码"><a href="#SnackBar源码" class="headerlink" title="SnackBar源码"></a>SnackBar源码</h2><h3 id="SnackBar-make"><a href="#SnackBar-make" class="headerlink" title="SnackBar#make"></a>SnackBar#make</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;此次SDK版本25.3.1.&lt;/p&gt;
&lt;h2 id=&quot;SnackBar源码&quot;&gt;&lt;a href=&quot;#SnackBar源码&quot; c
      
    
    </summary>
    
      <category term="Android" scheme="https://github.com/houtrry/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://github.com/houtrry/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="SnackBar" scheme="https://github.com/houtrry/tags/SnackBar/"/>
    
  </entry>
  
  <entry>
    <title>记录几个Git命令</title>
    <link href="https://github.com/houtrry/2017/08/31/%E8%AE%B0%E5%BD%95%E5%87%A0%E4%B8%AAGit%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/houtrry/2017/08/31/记录几个Git命令/</id>
    <published>2017-08-31T14:28:23.000Z</published>
    <updated>2017-12-26T03:30:25.372Z</updated>
    
    <content type="html"><![CDATA[<ul><li>git remote set-url origin <a href="https://git.coding.net/houtrry/hexo_source.git" target="_blank" rel="noopener">https://git.coding.net/houtrry/hexo_source.git</a>  设置新的地址  </li><li>rm -fr ./themes/next/.git/ 删除文件夹</li><li>git init 初始化git</li><li>git remote add origin <a href="https://git.coding.net/houtrry/hexo_source.git" target="_blank" rel="noopener">https://git.coding.net/houtrry/hexo_source.git</a> 设置仓库地址</li><li>git add . 添加全部的发生修改的文件</li><li>git commit -m “my first private hexo” 提交到本地代码仓库</li><li>git push -u origin master推送到远程仓库, 且仓库的分支是master</li><li>git push origin HEAD:source 提交到source分支</li><li>git push origin master提交到master分支  </li><li>git branch -a 查看远程所有分支<br>未完待续…</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;git remote set-url origin &lt;a href=&quot;https://git.coding.net/houtrry/hexo_source.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git.codin
      
    
    </summary>
    
      <category term="Android" scheme="https://github.com/houtrry/categories/Android/"/>
    
    
      <category term="Git" scheme="https://github.com/houtrry/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>IntentService源码分析</title>
    <link href="https://github.com/houtrry/2017/08/25/IntentService%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/houtrry/2017/08/25/IntentService源码分析/</id>
    <published>2017-08-25T07:41:08.000Z</published>
    <updated>2017-12-26T03:30:25.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="IntentService的源码"><a href="#IntentService的源码" class="headerlink" title="IntentService的源码"></a>IntentService的源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public abstract class IntentService extends Service &#123;</span><br><span class="line">    private volatile Looper mServiceLooper;</span><br><span class="line">    private volatile ServiceHandler mServiceHandler;</span><br><span class="line">    private String mName;</span><br><span class="line">    private boolean mRedelivery;</span><br><span class="line"></span><br><span class="line">    private final class ServiceHandler extends Handler &#123;</span><br><span class="line">        public ServiceHandler(Looper looper) &#123;</span><br><span class="line">            super(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            onHandleIntent((Intent)msg.obj);</span><br><span class="line">            stopSelf(msg.arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IntentService(String name) &#123;</span><br><span class="line">        super();</span><br><span class="line">        mName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setIntentRedelivery(boolean enabled) &#123;</span><br><span class="line">        mRedelivery = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        // TODO: It would be nice to have an option to hold a partial wakelock</span><br><span class="line">        // during processing, and to have a static startService(Context, Intent)</span><br><span class="line">        // method that would launch the service &amp; hand off a wakelock.</span><br><span class="line"></span><br><span class="line">        super.onCreate();</span><br><span class="line">        HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        mServiceLooper = thread.getLooper();</span><br><span class="line">        mServiceHandler = new ServiceHandler(mServiceLooper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onStart(@Nullable Intent intent, int startId) &#123;</span><br><span class="line">        Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">        msg.arg1 = startId;</span><br><span class="line">        msg.obj = intent;</span><br><span class="line">        mServiceHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123;</span><br><span class="line">        onStart(intent, startId);</span><br><span class="line">        return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        mServiceLooper.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Nullable</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @WorkerThread</span><br><span class="line">    protected abstract void onHandleIntent(@Nullable Intent intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HandlerThread源码"><a href="#HandlerThread源码" class="headerlink" title="HandlerThread源码"></a>HandlerThread源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class HandlerThread extends Thread &#123;</span><br><span class="line">    int mPriority;</span><br><span class="line">    int mTid = -1;</span><br><span class="line">    Looper mLooper;</span><br><span class="line"></span><br><span class="line">    public HandlerThread(String name) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public HandlerThread(String name, int priority) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">        mPriority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected void onLooperPrepared() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();</span><br><span class="line">        mTid = -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Looper getLooper() &#123;</span><br><span class="line">        if (!isAlive()) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // If the thread has been started, wait until the looper has been created.</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            while (isAlive() &amp;&amp; mLooper == null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return mLooper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean quit() &#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        if (looper != null) &#123;</span><br><span class="line">            looper.quit();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean quitSafely() &#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        if (looper != null) &#123;</span><br><span class="line">            looper.quitSafely();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getThreadId() &#123;</span><br><span class="line">        return mTid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="IntentService-onCreate"><a href="#IntentService-onCreate" class="headerlink" title="IntentService#onCreate"></a>IntentService#onCreate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><p>方法中创建了HandlerThread, 而HandlerThread继承自Thread, 即IntentService.onCreate方法中创建了一个子线程, 并开启了子线程.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mServiceLooper = thread.getLooper();</span><br><span class="line">mServiceHandler = new ServiceHandler(mServiceLooper);</span><br></pre></td></tr></table></figure></p><p>将子线程的Looper交给内部类ServiceHandler, 而ServiceHandler继承自Handler.<br>于是, 先来查看下HandlerThread到底做了什么.</p><h3 id="HandlerThread-run"><a href="#HandlerThread-run" class="headerlink" title="HandlerThread#run"></a>HandlerThread#run</h3><p>HandlerThread继承自Thread, 那先看下run方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    mTid = Process.myTid();</span><br><span class="line">    Looper.prepare();</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    Process.setThreadPriority(mPriority);</span><br><span class="line">    onLooperPrepared();</span><br><span class="line">    Looper.loop();</span><br><span class="line">    mTid = -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在run方法中, 我们看到了Looper.prepare()方法, 了解Handler的都知道, 在子线程中创建Handler, 需要先调用Looper.prepare()方法在子线程中创建looper.那这里run方法就清晰了, run方法创建了looper并且调用了Looper.loop()方法轮询Looper中的消息队列.  </p><h3 id="ServiceHandler-handleMessage"><a href="#ServiceHandler-handleMessage" class="headerlink" title="ServiceHandler#handleMessage"></a>ServiceHandler#handleMessage</h3><p>知道了ServiceHandler的looper来自于HandlerThread中创建的looper后, 我们可以知道, ServiceHandler#handleMessage将会执行在线程ServiceHandler中.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void handleMessage(Message msg) &#123;</span><br><span class="line">    onHandleIntent((Intent)msg.obj);</span><br><span class="line">    stopSelf(msg.arg1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>handleMessage中有onHandleIntent((Intent)msg.obj);和stopSelf(msg.arg1);<br>onHandleIntent((Intent)msg.obj)方法就是我们要具体实现的方法, 我们实现这个方法, 将需要在子线程中完成的事情放到这里.<br>stopSelf(msg.arg1)方法就是停止service.  </p><h3 id="那什么时候执行handleMessage方法中的内容呢"><a href="#那什么时候执行handleMessage方法中的内容呢" class="headerlink" title="那什么时候执行handleMessage方法中的内容呢?"></a>那什么时候执行handleMessage方法中的内容呢?</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onStart(@Nullable Intent intent, int startId) &#123;</span><br><span class="line">    Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">    msg.arg1 = startId;</span><br><span class="line">    msg.obj = intent;</span><br><span class="line">    mServiceHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123;</span><br><span class="line">    onStart(intent, startId);</span><br><span class="line">    return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  在IntentService#onStart方法中, mServiceHandler发出消息, 开始在子线程HandlerThread中执行onHandleIntent((Intent)msg.obj)和stopSelf(msg.arg1)  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.在IntentService#onCreate方法中<br>   ①创建子线程, 并在子线程中创建looper, 调用Looper.loop()方法轮询消息.<br>   ②用子线程中创建的Looper创建Handler.  </p><p>2.在IntentService#onStart方法中, 通过mServiceHandler发送Message, 触发在子线程(HandlerThread所在线程)中执行IntentService#onHandleIntent方法和IntentService#stopSelf来执行任务, 并在任务结束的时候停止Service.  </p><p>3.IntentService#onDestroy方法中, 执行mServiceLooper.quit();即, 停止loop的轮询.轮询停止后, 子线程HandlerThread也就结束了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;h3 id=&quot;IntentService的源码&quot;&gt;&lt;a href=&quot;#IntentService的源码&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Android" scheme="https://github.com/houtrry/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://github.com/houtrry/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="IntentService" scheme="https://github.com/houtrry/tags/IntentService/"/>
    
      <category term="HandlerThread" scheme="https://github.com/houtrry/tags/HandlerThread/"/>
    
  </entry>
  
  <entry>
    <title>dagger2的使用小结</title>
    <link href="https://github.com/houtrry/2017/08/25/dagger2%E7%9A%84%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://github.com/houtrry/2017/08/25/dagger2的使用小结/</id>
    <published>2017-08-25T05:53:50.000Z</published>
    <updated>2017-12-26T03:30:25.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入dagger2"><a href="#引入dagger2" class="headerlink" title="引入dagger2"></a>引入dagger2</h2><p>参考<a href="https://github.com/google/dagger">dagger2的GitHub</a>说明.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  compile &apos;com.google.dagger:dagger:2.x&apos;</span><br><span class="line">  annotationProcessor &apos;com.google.dagger:dagger-compiler:2.x&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>###几个常用的注解<br> @Module, @Component, @Inject, @Provides   </p><h2 id="生成对象的方式"><a href="#生成对象的方式" class="headerlink" title="生成对象的方式"></a>生成对象的方式</h2><p>生成对象有两个方式:<br>①.@Inject 注解提供方式：在所需类的构造函数中直接加上 @Inject 注解<br>②.@Module 注解提供方式：通过新建一个专门的提供这类来提供类实例，然后在类名上面添加 @Module 注解，在类中自己定义方法，手动通过 new 来进行创建，这种主要是针对第三方库中，我们无法直接在构造函数中添加 @Inject 注解的情况。  </p><h3 id="方式①"><a href="#方式①" class="headerlink" title="方式①"></a>方式①</h3><p>1&gt; 用@Inject注解Bean类的构造方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Apple &#123;</span><br><span class="line"></span><br><span class="line">    @Inject</span><br><span class="line">    public Apple() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return &quot;this is a red apple&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2&gt;使用@Component注解自己的Component类.比如下面的AppleComponent, 该类用@Component注解, 类中提供inject方法(方法名可以随便写, 一般用inject), 方法的参数Main9Activity是需要使用注解生成Apple的类.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public interface AppleComponent &#123;</span><br><span class="line">    void inject(Main9Activity main9Activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3&gt;编译项目, Android Studio<br> Build–&gt;Make Project<br>或者直接点击<br><img src="https://raw.githubusercontent.com/houtrry/blogs/master/image/001.png" alt="Aaron Swartz">  </p><p>4&gt;使用@Inject注解需要生成Apple的变量, 注入Main9Activity<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Main9Activity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @BindView(R.id.textView9)</span><br><span class="line">    TextView mTextView9;</span><br><span class="line"></span><br><span class="line">    @Inject</span><br><span class="line">    Apple mApple;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main9);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line"></span><br><span class="line">        DaggerAppleComponent.builder().build().inject(this);</span><br><span class="line"></span><br><span class="line">        mTextView9.setText(mApple.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DaggerAppleComponent.builder().build().inject(this);</span><br></pre></td></tr></table></figure><p>这里, 上面第4步生成了DaggerAppleComponent, 实现了接口AppleComponent的inject方法, 此时, 注入Main9Activity, 将Main9Activity和Apple关联起来.  </p><p>那么, 思考一个问题, 如果这个Apple类我们并不能修改, 也就是我们不能再Apple的构造函数上添加注解@Inject(比如第三方库里的类), 那我们怎么处理呢? 这就得用我们第二种注解方法了.  </p><h3 id="方式②"><a href="#方式②" class="headerlink" title="方式②"></a>方式②</h3><p>1&gt; 生成一个普通的Bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Cloth &#123;</span><br><span class="line">    private String color;</span><br><span class="line"></span><br><span class="line">    public String getColor() &#123;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setColor(String color) &#123;</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return color + &quot;布料&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2&gt;构建Module<br>注解@Module表明这是一个Module类, 方法上的@Provides表明该方法生成一个返回值为Cloth类型的依赖对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class MainModule &#123;</span><br><span class="line"></span><br><span class="line">    @Provides</span><br><span class="line">    public Cloth getCloth() &#123;</span><br><span class="line">        Cloth cloth = new Cloth();</span><br><span class="line">        cloth.setColor(&quot;红色&quot;);</span><br><span class="line">        return cloth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3&gt;书写Component<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(modules=MainModule.class)</span><br><span class="line">public interface MainComponent &#123;</span><br><span class="line">    void inject(MainActivity mainActivity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MainComponent是一个接口, 接口上用@Component注解, 表明这是一个Component, @Component的参数model=MainModule.class, 将MainMoudle和MainComponent关联起来, MainComponent中有一个inject的方法(方法名随意, 方法参数是需要使用到注解生成对象的类, 这里是需要在MainActivity中使用注解生成Cloth)<br>4&gt;AS: Build–&gt;make Project<br>5&gt;在MainActivity中使用注解.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Main3Activity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private TextView mTextView;</span><br><span class="line"></span><br><span class="line">    @Inject</span><br><span class="line">    Cloth mCloth;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main3);</span><br><span class="line"></span><br><span class="line">        mTextView = (TextView) findViewById(R.id.textView2);</span><br><span class="line"></span><br><span class="line">        DaggerMainComponent.builder().mainModule(new MainModule()).build().inject(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Dagger2原理分析"><a href="#Dagger2原理分析" class="headerlink" title="Dagger2原理分析"></a>Dagger2原理分析</h2><p>1.就使用上面方式一的例子吧.注入的目的是在Main9Activity中生成Apple的实例.<br>我们从<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DaggerAppleComponent.builder().build().inject(this);</span><br></pre></td></tr></table></figure></p><p>开始分析吧.<br>首先, 看下DaggerAppleComponent的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public final class DaggerAppleComponent implements AppleComponent &#123;</span><br><span class="line">  private MembersInjector&lt;Main9Activity&gt; main9ActivityMembersInjector;</span><br><span class="line"></span><br><span class="line">  private DaggerAppleComponent(Builder builder) &#123;</span><br><span class="line">    assert builder != null;</span><br><span class="line">    initialize(builder);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static Builder builder() &#123;</span><br><span class="line">    return new Builder();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static AppleComponent create() &#123;</span><br><span class="line">    return new Builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">  private void initialize(final Builder builder) &#123;</span><br><span class="line"></span><br><span class="line">    this.main9ActivityMembersInjector =</span><br><span class="line">        Main9Activity_MembersInjector.create(Apple_Factory.create());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void inject(Main9Activity main9Activity) &#123;</span><br><span class="line">    main9ActivityMembersInjector.injectMembers(main9Activity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static final class Builder &#123;</span><br><span class="line">    private Builder() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public AppleComponent build() &#123;</span><br><span class="line">      return new DaggerAppleComponent(this);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.DaggerAppleComponent.builder(): builder()方法里new 了一个DaggerAppleComponent.Builder, 并返回这个新建的Builder.<br>3.DaggerAppleComponent.builder().build(): build()方法里new了DaggerAppleComponent的实例, 并将上个方法创建的Builder传给了DaggerAppleComponent的构造方法.<br>在DaggerAppleComponent的构造方法里, 调用了DaggerAppleComponent.initialize(builder).<br>在initialize里. 调用了Main9Activity_MembersInjector.create(Apple_Factory.create())方法.<br>4.现在我们来看一下这个Main9Activity_MembersInjector.create(Apple_Factory.create())方法都做了什么事情.<br>首先, 看下Apple_Factory的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public final class Apple_Factory implements Factory&lt;Apple&gt; &#123;</span><br><span class="line">  private static final Apple_Factory INSTANCE = new Apple_Factory();</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public Apple get() &#123;</span><br><span class="line">    return new Apple();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static Factory&lt;Apple&gt; create() &#123;</span><br><span class="line">    return INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从源码可知, Apple_Factory是个单例, create方法返回了该单例. get方法返回了一个Apple实例.<br>这个时候就要注意了, 我们注解的目的是什么? 就是生成一个Apple实例啊, 那么, 现在我们知道, Apple_Factory的get方法创建了一个Apple实例. 记住这一点. 我们继续向下看Main9Activity_MembersInjector.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public final class Main9Activity_MembersInjector implements MembersInjector&lt;Main9Activity&gt; &#123;</span><br><span class="line">  private final Provider&lt;Apple&gt; mAppleProvider;</span><br><span class="line"></span><br><span class="line">  public Main9Activity_MembersInjector(Provider&lt;Apple&gt; mAppleProvider) &#123;</span><br><span class="line">    assert mAppleProvider != null;</span><br><span class="line">    this.mAppleProvider = mAppleProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static MembersInjector&lt;Main9Activity&gt; create(Provider&lt;Apple&gt; mAppleProvider) &#123;</span><br><span class="line">    return new Main9Activity_MembersInjector(mAppleProvider);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void injectMembers(Main9Activity instance) &#123;</span><br><span class="line">    if (instance == null) &#123;</span><br><span class="line">      throw new NullPointerException(&quot;Cannot inject members into a null reference&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    instance.mApple = mAppleProvider.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static void injectMApple(Main9Activity instance, Provider&lt;Apple&gt; mAppleProvider) &#123;</span><br><span class="line">    instance.mApple = mAppleProvider.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Main9Activity_MembersInjector.create(Apple_Factory.create())方法到底做了什么呢?<br>我们已知Apple_Factory.create()返回了单例Apple_Factory并且, Apple_Factory.get方法返回了Apple的实例.<br>现在来看Main9Activity_MembersInjector.create, 在该方法中, new了一个Main9Activity_MembersInjector, 并将Apple_Factory的单例传给这个构造方法.<br>在Main9Activity_MembersInjector的构造方法中, 将Apple_Factory的实例赋值给了Main9Activity_MembersInjector的成员变量mAppleProvider, 此时, 通过成员变量mAppleProvider的get方法就可以得到一个Apple的实例了.<br>5.DaggerMainComponent.builder().mainModule(new MainModule()).build().inject(this): 最后这个inject方法做了什么呢?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void inject(Main9Activity main9Activity) &#123;</span><br><span class="line">  main9ActivityMembersInjector.injectMembers(main9Activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void injectMembers(Main9Activity instance) &#123;</span><br><span class="line">  if (instance == null) &#123;</span><br><span class="line">    throw new NullPointerException(&quot;Cannot inject members into a null reference&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  instance.mApple = mAppleProvider.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时, 我们终于找到了这个给Main9Activity的成员变量mApple赋值的地方了, 通过inject调用Main9Activity_MembersInjector.injectMembers方法, 在injectMembers方法中, 通过单例Apple_Factory.get获取Apple的实例, 并将该实例直接赋值飞Main9Activity.mApple, 到此, 给mApple生成实例的过程就结束了.  当然, 这里分析的只是最简单的使用模式, 随着Dagger2的使用, 代码会越来越复杂.<br>在这里, 我们也可以明白, 为什么成员变量mApple不能是private或者protected的, 因为给mApple赋值的方式使用过instance.mApple来实现的, 如果mApple是private或者protected, 这里将会报错.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引入dagger2&quot;&gt;&lt;a href=&quot;#引入dagger2&quot; class=&quot;headerlink&quot; title=&quot;引入dagger2&quot;&gt;&lt;/a&gt;引入dagger2&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://github.com/google/dagge
      
    
    </summary>
    
      <category term="Android" scheme="https://github.com/houtrry/categories/Android/"/>
    
    
      <category term="Dagger2" scheme="https://github.com/houtrry/tags/Dagger2/"/>
    
  </entry>
  
</feed>
