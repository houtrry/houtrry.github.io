<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白日梦想家</title>
  <subtitle>未觉池塘春草梦, 阶前梧叶已秋声.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/houtrry/"/>
  <updated>2017-08-25T10:01:37.508Z</updated>
  <id>https://github.com/houtrry/</id>
  
  <author>
    <name>houtrry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IntentService源码分析</title>
    <link href="https://github.com/houtrry/2017/08/25/IntentService%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/houtrry/2017/08/25/IntentService源码分析/</id>
    <published>2017-08-25T07:41:08.000Z</published>
    <updated>2017-08-25T10:01:37.508Z</updated>
    
    <content type="html"><![CDATA[<h2>源码</h2>
<h3>IntentService的源码</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">public abstract class IntentService extends Service &#123;</div><div class="line">    private volatile Looper mServiceLooper;</div><div class="line">    private volatile ServiceHandler mServiceHandler;</div><div class="line">    private String mName;</div><div class="line">    private boolean mRedelivery;</div><div class="line"></div><div class="line">    private final class ServiceHandler extends Handler &#123;</div><div class="line">        public ServiceHandler(Looper looper) &#123;</div><div class="line">            super(looper);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            onHandleIntent((Intent)msg.obj);</div><div class="line">            stopSelf(msg.arg1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public IntentService(String name) &#123;</div><div class="line">        super();</div><div class="line">        mName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setIntentRedelivery(boolean enabled) &#123;</div><div class="line">        mRedelivery = enabled;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        // TODO: It would be nice to have an option to hold a partial wakelock</div><div class="line">        // during processing, and to have a static startService(Context, Intent)</div><div class="line">        // method that would launch the service &amp; hand off a wakelock.</div><div class="line"></div><div class="line">        super.onCreate();</div><div class="line">        HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</div><div class="line">        thread.start();</div><div class="line"></div><div class="line">        mServiceLooper = thread.getLooper();</div><div class="line">        mServiceHandler = new ServiceHandler(mServiceLooper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStart(@Nullable Intent intent, int startId) &#123;</div><div class="line">        Message msg = mServiceHandler.obtainMessage();</div><div class="line">        msg.arg1 = startId;</div><div class="line">        msg.obj = intent;</div><div class="line">        mServiceHandler.sendMessage(msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123;</div><div class="line">        onStart(intent, startId);</div><div class="line">        return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        mServiceLooper.quit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    @Nullable</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @WorkerThread</div><div class="line">    protected abstract void onHandleIntent(@Nullable Intent intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>HandlerThread源码</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">public class HandlerThread extends Thread &#123;</div><div class="line">    int mPriority;</div><div class="line">    int mTid = -1;</div><div class="line">    Looper mLooper;</div><div class="line"></div><div class="line">    public HandlerThread(String name) &#123;</div><div class="line">        super(name);</div><div class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public HandlerThread(String name, int priority) &#123;</div><div class="line">        super(name);</div><div class="line">        mPriority = priority;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    protected void onLooperPrepared() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        mTid = Process.myTid();</div><div class="line">        Looper.prepare();</div><div class="line">        synchronized (this) &#123;</div><div class="line">            mLooper = Looper.myLooper();</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line">        Process.setThreadPriority(mPriority);</div><div class="line">        onLooperPrepared();</div><div class="line">        Looper.loop();</div><div class="line">        mTid = -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Looper getLooper() &#123;</div><div class="line">        if (!isAlive()) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // If the thread has been started, wait until the looper has been created.</div><div class="line">        synchronized (this) &#123;</div><div class="line">            while (isAlive() &amp;&amp; mLooper == null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    wait();</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mLooper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean quit() &#123;</div><div class="line">        Looper looper = getLooper();</div><div class="line">        if (looper != null) &#123;</div><div class="line">            looper.quit();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean quitSafely() &#123;</div><div class="line">        Looper looper = getLooper();</div><div class="line">        if (looper != null) &#123;</div><div class="line">            looper.quitSafely();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getThreadId() &#123;</div><div class="line">        return mTid;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>分析</h2>
<h3>IntentService#onCreate</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</div><div class="line">thread.start();</div></pre></td></tr></table></figure></p>
<p>方法中创建了HandlerThread, 而HandlerThread继承自Thread, 即IntentService.onCreate方法中创建了一个子线程, 并开启了子线程.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mServiceLooper = thread.getLooper();</div><div class="line">mServiceHandler = new ServiceHandler(mServiceLooper);</div></pre></td></tr></table></figure></p>
<p>将子线程的Looper交给内部类ServiceHandler, 而ServiceHandler继承自Handler.<br>
于是, 先来查看下HandlerThread到底做了什么.</p>
<h3>HandlerThread#run</h3>
<p>HandlerThread继承自Thread, 那先看下run方法
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void run() &#123;</div><div class="line">    mTid = Process.myTid();</div><div class="line">    Looper.prepare();</div><div class="line">    synchronized (this) &#123;</div><div class="line">        mLooper = Looper.myLooper();</div><div class="line">        notifyAll();</div><div class="line">    &#125;</div><div class="line">    Process.setThreadPriority(mPriority);</div><div class="line">    onLooperPrepared();</div><div class="line">    Looper.loop();</div><div class="line">    mTid = -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在run方法中, 我们看到了Looper.prepare()方法, 了解Handler的都知道, 在子线程中创建Handler, 需要先调用Looper.prepare()方法在子线程中创建looper.那这里run方法就清晰了, run方法创建了looper并且调用了Looper.loop()方法轮询Looper中的消息队列.</p>
<h3>ServiceHandler#handleMessage</h3>
<p>知道了ServiceHandler的looper来自于HandlerThread中创建的looper后, 我们可以知道, ServiceHandler#handleMessage将会执行在线程ServiceHandler中.<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void handleMessage(Message msg) &#123;</div><div class="line">    onHandleIntent((Intent)msg.obj);</div><div class="line">    stopSelf(msg.arg1);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>handleMessage中有onHandleIntent((Intent)msg.obj);和stopSelf(msg.arg1);<br>
onHandleIntent((Intent)msg.obj)方法就是我们要具体实现的方法, 我们实现这个方法, 将需要在子线程中完成的事情放到这里.<br>
stopSelf(msg.arg1)方法就是停止service.</p>
<h3>那什么时候执行handleMessage方法中的内容呢?</h3>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onStart(@Nullable Intent intent, int startId) &#123;</div><div class="line">    Message msg = mServiceHandler.obtainMessage();</div><div class="line">    msg.arg1 = startId;</div><div class="line">    msg.obj = intent;</div><div class="line">    mServiceHandler.sendMessage(msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123;</div><div class="line">    onStart(intent, startId);</div><div class="line">    return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在IntentService#onStart方法中, mServiceHandler发出消息, 开始在子线程HandlerThread中执行onHandleIntent((Intent)msg.obj)和stopSelf(msg.arg1)</p>
<h2>总结</h2>
<p>1.在IntentService#onCreate方法中<br>
①创建子线程, 并在子线程中创建looper, 调用Looper.loop()方法轮询消息.<br>
②用子线程中创建的Looper创建Handler.</p>
<p>2.在IntentService#onStart方法中, 通过mServiceHandler发送Message, 触发在子线程(HandlerThread所在线程)中执行IntentService#onHandleIntent方法和IntentService#stopSelf来执行任务, 并在任务结束的时候停止Service.</p>
<p>3.IntentService#onDestroy方法中, 执行mServiceLooper.quit();即, 停止loop的轮询.轮询停止后, 子线程HandlerThread也就结束了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;源码&lt;/h2&gt;
&lt;h3&gt;IntentService的源码&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cl
    
    </summary>
    
      <category term="Android" scheme="https://github.com/houtrry/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://github.com/houtrry/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="IntentService" scheme="https://github.com/houtrry/tags/IntentService/"/>
    
      <category term="HandlerThread" scheme="https://github.com/houtrry/tags/HandlerThread/"/>
    
  </entry>
  
  <entry>
    <title>dagger2的使用小结</title>
    <link href="https://github.com/houtrry/2017/08/25/dagger2%E7%9A%84%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://github.com/houtrry/2017/08/25/dagger2的使用小结/</id>
    <published>2017-08-25T05:53:50.000Z</published>
    <updated>2017-08-25T09:44:19.941Z</updated>
    
    <content type="html"><![CDATA[<h2>引入dagger2</h2>
<p>参考<a href="https://github.com/google/dagger">dagger2的GitHub</a>说明.<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  compile &apos;com.google.dagger:dagger:2.x&apos;</div><div class="line">  annotationProcessor &apos;com.google.dagger:dagger-compiler:2.x&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>###几个常用的注解<br>
@Module, @Component, @Inject, @Provides</p>
<h2>生成对象的方式</h2>
<p>生成对象有两个方式:<br>
①.@Inject 注解提供方式：在所需类的构造函数中直接加上 @Inject 注解<br>
②.@Module 注解提供方式：通过新建一个专门的提供这类来提供类实例，然后在类名上面添加 @Module 注解，在类中自己定义方法，手动通过 new 来进行创建，这种主要是针对第三方库中，我们无法直接在构造函数中添加 @Inject 注解的情况。</p>
<h3>方式①</h3>
<p>1&gt; 用@Inject注解Bean类的构造方法
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Apple &#123;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    public Apple() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDescription() &#123;</div><div class="line">        return &quot;this is a red apple&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2&gt;使用@Component注解自己的Component类.比如下面的AppleComponent, 该类用@Component注解, 类中提供inject方法(方法名可以随便写, 一般用inject), 方法的参数Main9Activity是需要使用注解生成Apple的类.<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public interface AppleComponent &#123;</div><div class="line">    void inject(Main9Activity main9Activity);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3&gt;编译项目, Android Studio<br>
Build--&gt;Make Project<br>
或者直接点击<br>
<img src="https://raw.githubusercontent.com/houtrry/blogs/master/image/001.png" alt="Aaron Swartz"></p>
<p>4&gt;使用@Inject注解需要生成Apple的变量, 注入Main9Activity<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Main9Activity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @BindView(R.id.textView9)</div><div class="line">    TextView mTextView9;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    Apple mApple;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main9);</div><div class="line">        ButterKnife.bind(this);</div><div class="line"></div><div class="line">        DaggerAppleComponent.builder().build().inject(this);</div><div class="line"></div><div class="line">        mTextView9.setText(mApple.getDescription());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DaggerAppleComponent.builder().build().inject(this);</div></pre></td></tr></table></figure></p>
<p>这里, 上面第4步生成了DaggerAppleComponent, 实现了接口AppleComponent的inject方法, 此时, 注入Main9Activity, 将Main9Activity和Apple关联起来.</p>
<p>那么, 思考一个问题, 如果这个Apple类我们并不能修改, 也就是我们不能再Apple的构造函数上添加注解@Inject(比如第三方库里的类), 那我们怎么处理呢? 这就得用我们第二种注解方法了.</p>
<h3>方式②</h3>
<p>1&gt; 生成一个普通的Bean
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Cloth &#123;</div><div class="line">    private String color;</div><div class="line"></div><div class="line">    public String getColor() &#123;</div><div class="line">        return color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setColor(String color) &#123;</div><div class="line">        this.color = color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return color + &quot;布料&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2&gt;构建Module<br>
注解@Module表明这是一个Module类, 方法上的@Provides表明该方法生成一个返回值为Cloth类型的依赖对象
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Module</div><div class="line">public class MainModule &#123;</div><div class="line"></div><div class="line">    @Provides</div><div class="line">    public Cloth getCloth() &#123;</div><div class="line">        Cloth cloth = new Cloth();</div><div class="line">        cloth.setColor(&quot;红色&quot;);</div><div class="line">        return cloth;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3&gt;书写Component<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Component(modules=MainModule.class)</div><div class="line">public interface MainComponent &#123;</div><div class="line">    void inject(MainActivity mainActivity);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MainComponent是一个接口, 接口上用@Component注解, 表明这是一个Component, @Component的参数model=MainModule.class, 将MainMoudle和MainComponent关联起来, MainComponent中有一个inject的方法(方法名随意, 方法参数是需要使用到注解生成对象的类, 这里是需要在MainActivity中使用注解生成Cloth)<br>
4&gt;AS: Build--&gt;make Project<br>
5&gt;在MainActivity中使用注解.<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Main3Activity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private TextView mTextView;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    Cloth mCloth;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main3);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.textView2);</div><div class="line"></div><div class="line">        DaggerMainComponent.builder().mainModule(new MainModule()).build().inject(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>Dagger2原理分析</h2>
<p>1.就使用上面方式一的例子吧.注入的目的是在Main9Activity中生成Apple的实例.<br>
我们从
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DaggerAppleComponent.builder().build().inject(this);</div></pre></td></tr></table></figure></p>
<p>开始分析吧.<br>
首先, 看下DaggerAppleComponent的源码<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public final class DaggerAppleComponent implements AppleComponent &#123;</div><div class="line">  private MembersInjector&lt;Main9Activity&gt; main9ActivityMembersInjector;</div><div class="line"></div><div class="line">  private DaggerAppleComponent(Builder builder) &#123;</div><div class="line">    assert builder != null;</div><div class="line">    initialize(builder);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static Builder builder() &#123;</div><div class="line">    return new Builder();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static AppleComponent create() &#123;</div><div class="line">    return new Builder().build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">  private void initialize(final Builder builder) &#123;</div><div class="line"></div><div class="line">    this.main9ActivityMembersInjector =</div><div class="line">        Main9Activity_MembersInjector.create(Apple_Factory.create());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void inject(Main9Activity main9Activity) &#123;</div><div class="line">    main9ActivityMembersInjector.injectMembers(main9Activity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static final class Builder &#123;</div><div class="line">    private Builder() &#123;&#125;</div><div class="line"></div><div class="line">    public AppleComponent build() &#123;</div><div class="line">      return new DaggerAppleComponent(this);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.DaggerAppleComponent.builder(): builder()方法里new 了一个DaggerAppleComponent.Builder, 并返回这个新建的Builder.<br>
3.DaggerAppleComponent.builder().build(): build()方法里new了DaggerAppleComponent的实例, 并将上个方法创建的Builder传给了DaggerAppleComponent的构造方法.<br>
在DaggerAppleComponent的构造方法里, 调用了DaggerAppleComponent.initialize(builder).<br>
在initialize里. 调用了Main9Activity_MembersInjector.create(Apple_Factory.create())方法.<br>
4.现在我们来看一下这个Main9Activity_MembersInjector.create(Apple_Factory.create())方法都做了什么事情.<br>
首先, 看下Apple_Factory的源码
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public final class Apple_Factory implements Factory&lt;Apple&gt; &#123;</div><div class="line">  private static final Apple_Factory INSTANCE = new Apple_Factory();</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public Apple get() &#123;</div><div class="line">    return new Apple();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static Factory&lt;Apple&gt; create() &#123;</div><div class="line">    return INSTANCE;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从源码可知, Apple_Factory是个单例, create方法返回了该单例. get方法返回了一个Apple实例.<br>
这个时候就要注意了, 我们注解的目的是什么? 就是生成一个Apple实例啊, 那么, 现在我们知道, Apple_Factory的get方法创建了一个Apple实例. 记住这一点. 我们继续向下看Main9Activity_MembersInjector.<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public final class Main9Activity_MembersInjector implements MembersInjector&lt;Main9Activity&gt; &#123;</div><div class="line">  private final Provider&lt;Apple&gt; mAppleProvider;</div><div class="line"></div><div class="line">  public Main9Activity_MembersInjector(Provider&lt;Apple&gt; mAppleProvider) &#123;</div><div class="line">    assert mAppleProvider != null;</div><div class="line">    this.mAppleProvider = mAppleProvider;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static MembersInjector&lt;Main9Activity&gt; create(Provider&lt;Apple&gt; mAppleProvider) &#123;</div><div class="line">    return new Main9Activity_MembersInjector(mAppleProvider);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void injectMembers(Main9Activity instance) &#123;</div><div class="line">    if (instance == null) &#123;</div><div class="line">      throw new NullPointerException(&quot;Cannot inject members into a null reference&quot;);</div><div class="line">    &#125;</div><div class="line">    instance.mApple = mAppleProvider.get();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static void injectMApple(Main9Activity instance, Provider&lt;Apple&gt; mAppleProvider) &#123;</div><div class="line">    instance.mApple = mAppleProvider.get();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Main9Activity_MembersInjector.create(Apple_Factory.create())方法到底做了什么呢?<br>
我们已知Apple_Factory.create()返回了单例Apple_Factory并且, Apple_Factory.get方法返回了Apple的实例.<br>
现在来看Main9Activity_MembersInjector.create, 在该方法中, new了一个Main9Activity_MembersInjector, 并将Apple_Factory的单例传给这个构造方法.<br>
在Main9Activity_MembersInjector的构造方法中, 将Apple_Factory的实例赋值给了Main9Activity_MembersInjector的成员变量mAppleProvider, 此时, 通过成员变量mAppleProvider的get方法就可以得到一个Apple的实例了.<br>
5.DaggerMainComponent.builder().mainModule(new MainModule()).build().inject(this): 最后这个inject方法做了什么呢?<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void inject(Main9Activity main9Activity) &#123;</div><div class="line">  main9ActivityMembersInjector.injectMembers(main9Activity);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void injectMembers(Main9Activity instance) &#123;</div><div class="line">  if (instance == null) &#123;</div><div class="line">    throw new NullPointerException(&quot;Cannot inject members into a null reference&quot;);</div><div class="line">  &#125;</div><div class="line">  instance.mApple = mAppleProvider.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时, 我们终于找到了这个给Main9Activity的成员变量mApple赋值的地方了, 通过inject调用Main9Activity_MembersInjector.injectMembers方法, 在injectMembers方法中, 通过单例Apple_Factory.get获取Apple的实例, 并将该实例直接赋值飞Main9Activity.mApple, 到此, 给mApple生成实例的过程就结束了.  当然, 这里分析的只是最简单的使用模式, 随着Dagger2的使用, 代码会越来越复杂.
在这里, 我们也可以明白, 为什么成员变量mApple不能是private或者protected的, 因为给mApple赋值的方式使用过instance.mApple来实现的, 如果mApple是private或者protected, 这里将会报错.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;引入dagger2&lt;/h2&gt;
&lt;p&gt;参考&lt;a href=&quot;https://github.com/google/dagger&quot;&gt;dagger2的GitHub&lt;/a&gt;说明.&lt;br&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
    
    </summary>
    
      <category term="Android" scheme="https://github.com/houtrry/categories/Android/"/>
    
    
      <category term="Dagger2" scheme="https://github.com/houtrry/tags/Dagger2/"/>
    
  </entry>
  
</feed>
